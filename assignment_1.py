# -*- coding: utf-8 -*-
"""assignment 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J-lU0xDQ5Zp5G8HfLNxBFl_Tzi6nkJNU
"""

import warnings
warnings.filterwarnings("ignore")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from prophet.diagnostics import cross_validation, performance_metrics

URL = "https://raw.githubusercontent.com/dustywhite7/econ8310-assignment1/main/assignment_data_train.csv"

try:
    import janitor
    raw = pd.read_csv(URL).clean_names()
except Exception:
    raw = pd.read_csv(URL)
    raw.columns = (raw.columns.str.strip().str.lower()
                   .str.replace(r"[^0-9a-zA-Z]+", "_", regex=True)
                   .str.strip("_"))

DATE_COL_NAME   = "timestamp"
TARGET_COL_NAME = "trips"

df = raw.copy()
df["ds"] = pd.to_datetime(df[DATE_COL_NAME], errors="coerce", infer_datetime_format=True)
df["y"] = pd.to_numeric(df[TARGET_COL_NAME].astype(str).str.replace(",", ""), errors="coerce")

df = (df.loc[df["ds"].notna() & df["y"].notna(), ["ds","y"]]
        .sort_values("ds")
        .groupby("ds", as_index=False)["y"].sum())

if len(df) >= 2:
    step_days = np.median(df["ds"].diff().dropna().dt.total_seconds()) / 86400
else:
    step_days = 1.0

if step_days <= 1.5:
    pandas_freq, periods, daily, weekly = "H" if (df["ds"].diff().dt.total_seconds().dropna().min() or 86400) < 86400 else "D", 90, True, True
    if pandas_freq == "H": periods = 24*14
elif step_days <= 10:
    pandas_freq, periods, daily, weekly = "W", 26, False, True
else:
    pandas_freq, periods, daily, weekly = "MS", 12, False, False

print(f"Future freq={pandas_freq}, periods={periods}")

m = Prophet(daily_seasonality=daily, weekly_seasonality=weekly, yearly_seasonality="auto",
            seasonality_mode="additive")
m.fit(df)

future   = m.make_future_dataframe(periods=periods, freq=pandas_freq, include_history=True)
forecast = m.predict(future)

fig1 = m.plot(forecast)
plt.title("Prophet Forecast")
plt.xlabel("Date"); plt.ylabel("y")
plt.tight_layout()
plt.savefig("prophet_forecast.png", dpi=150)
plt.show()

fig2 = m.plot_components(forecast)
plt.tight_layout()
plt.savefig("prophet_components.png", dpi=150)
plt.show()

try:
    span_days = max((df["ds"].max() - df["ds"].min()).days, 1)
    horizon = f"{max(min(int(span_days*0.25), 90), 7)} days"
    period  = f"{max(int(int(horizon.split()[0]) / 2), 3)} days"
    initial = f"{max(span_days - int(horizon.split()[0]) - int(period.split()[0]), 30)} days"

    print("CV ->", "initial:", initial, "| period:", period, "| horizon:", horizon)
    from prophet.diagnostics import cross_validation, performance_metrics
    df_cv = cross_validation(m, initial=initial, period=period, horizon=horizon, parallel="processes")
    print(performance_metrics(df_cv).head())
except Exception as e:
    print("CV skipped:", e)

print("Saved figures: prophet_forecast.png, prophet_components.png")

print("After cleaning -> rows:", len(df))
print("Date range:", df["ds"].min(), "to", df["ds"].max())
print(df["y"].describe())
print("Any NA in y?", df["y"].isna().any())

print("Raw columns:", list(raw.columns))
print(raw.head(3))